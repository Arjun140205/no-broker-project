generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role
  phone        String?
  avatar       String?
  bio          String?
  verified     Boolean  @default(false)
  properties   Property[]
  messages     Message[]
  chatsAsBuyer Chat[]   @relation("BuyerChats")
  chatsAsOwner Chat[]   @relation("OwnerChats")
  bookingsMade Booking[] @relation("UserBookings")
  bookingsReceived Booking[] @relation("OwnerBookings")
  sentMessages DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Property {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  location    String
  address     String?
  city        String
  state       String
  pincode     String?
  type        PropertyType
  category    PropertyCategory @default(rent)
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  furnished   FurnishedType @default(unfurnished)
  amenities   String[]
  images      String[]
  available   Boolean  @default(true)
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  messages    Message[]
  chats       Chat[]
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chat {
  id         String   @id @default(uuid())
  buyer      User     @relation("BuyerChats", fields: [buyerId], references: [id])
  buyerId    String
  owner      User     @relation("OwnerChats", fields: [ownerId], references: [id])
  ownerId    String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  messages   Message[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([buyerId, ownerId, propertyId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  timestamp  DateTime @default(now())
}

model Booking {
  id         String        @id @default(uuid())
  property   Property      @relation(fields: [propertyId], references: [id])
  propertyId String
  user       User          @relation("UserBookings", fields: [userId], references: [id])
  userId     String
  owner      User          @relation("OwnerBookings", fields: [ownerId], references: [id])
  ownerId    String
  checkIn    DateTime
  checkOut   DateTime
  totalAmount Float
  status     BookingStatus @default(pending)
  paymentId  String?
  paymentStatus PaymentStatus @default(pending)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum Role {
  owner
  seeker
}

enum PropertyType {
  flat
  house
  pg
  villa
  studio
  office
}

enum PropertyCategory {
  rent
  buy
}

enum FurnishedType {
  furnished
  semifurnished
  unfurnished
}

enum BookingStatus {
  pending
  accepted
  rejected
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

model DirectMessage {
  id         String   @id @default(uuid())
  content    String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  @@index([senderId, receiverId])
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String        @unique
  razorpayOrderId String?
  razorpayPaymentId String?
  razorpaySignature String?
  amount        Float
  currency      String        @default("INR")
  status        PaymentStatus @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}